use ieee;
library ieee.std_logic_1164;

entity alarmDetection is
port(
timeS1:in std_logic_vector(3 downto 0);
timeS10:in std_logic_vector(3 downto 0);
timeM1:in std_logic_vector(3 downto 0);
timeM10:in std_logic_vector(3 downto 0);
timeH1:in std_logic_vector(3 downto 0);
timeH10:in std_logic_vector(3 downto 0);

alarmS1:in std_logic_vector(3 downto 0);
alarmS10:in std_logic_vector(3 downto 0);
alarmM1:in std_logic_vector(3 downto 0);
alarmM10:in std_logic_vector(3 downto 0);
alarmS1:in std_logic_vector(3 downto 0);
alarmS1:in std_logic_vector(3 downto 0);

alarmSent:out std_logic_vector(3 downto 0);
);
end alarmDetection;

architecture a of alarmDetection is
signal tempS1: std_logic;
signal tempS10: std_logic;
signal tempM1: std_logic;
signal tempM10: std_logic;
signal tempH1: std_logic;
signal tempH10: std_logic;
signal tempVS1: std_logic_vector(3 downto 0);
signal tempVS10: std_logic_vector(3 downto 0);
signal tempVM1: std_logic_vector(3 downto 0);
signal tempVM10: std_logic_vector(3 downto 0);
signal tempVH1: std_logic_vector(3 downto 0);
signal tempVH10: std_logic_vector(3 downto 0);
begin
tempVS1 <= timeS1 XOR alarmS1;
tempVS10 <= timeS10 XOR alarmS10;
tempVM1 <= timeM1 XOR alarmM1;
tempVM10 <= timeM10 XOR alarmM10;
tempVH1 <= timeH1 XOR alarmH1;
tempVH10 <= timeH10 XOR alarmH10;

tempS1 <= tempVS1(3) XOR tempVS1(2) XOR tempVS1(1) XOR tempVS1(0);
tempS10 <= tempVS1(3) XOR tempVS10(2) XOR tempVS10(1) XOR tempVS10(0);
tempM1 <= tempVM1(3) XOR tempVM1(2) XOR tempVM1(1) XOR tempVM1(0);
tempM10 <= tempVM10(3) XOR tempVM10(2) XOR tempVM10(1) XOR tempVM10(0);
tempH1 <= tempVH1(3) XOR tempVH1(2) XOR tempVH1(1) XOR tempVH1(0);
tempH10 <= tempVH10(3) XOR tempVH10(2) XOR tempVH10(1) XOR tempVH10(0);

alarmSent <= tempS1 XOR tempS10 XOR tempM1 XOR tempM10 XOR tempH1 XOR tempH10;
end a;