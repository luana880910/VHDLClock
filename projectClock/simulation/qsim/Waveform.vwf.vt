// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/29/2020 15:22:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projectClock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projectClock_vlg_sample_tst(
	clk,
	edit_pin,
	keypad_0,
	keypad_1,
	keypad_2,
	sampler_tx
);
input  clk;
input  edit_pin;
input  keypad_0;
input  keypad_1;
input  keypad_2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or edit_pin or keypad_0 or keypad_1 or keypad_2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projectClock_vlg_check_tst (
	b_v,
	COM,
	ppop,
	S,
	testpin,
	sampler_rx
);
input [6:0] b_v;
input  COM;
input [3:0] ppop;
input [2:0] S;
input [3:0] testpin;
input sampler_rx;

reg [6:0] b_v_expected;
reg  COM_expected;
reg [3:0] ppop_expected;
reg [2:0] S_expected;
reg [3:0] testpin_expected;

reg [6:0] b_v_prev;
reg  COM_prev;
reg [3:0] ppop_prev;
reg [2:0] S_prev;
reg [3:0] testpin_prev;

reg [3:0] ppop_expected_prev;
reg [3:0] testpin_expected_prev;

reg [3:0] last_ppop_exp;
reg [3:0] last_testpin_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	b_v_prev = b_v;
	COM_prev = COM;
	ppop_prev = ppop;
	S_prev = S;
	testpin_prev = testpin;
end

// update expected /o prevs

always @(trigger)
begin
	ppop_expected_prev = ppop_expected;
	testpin_expected_prev = testpin_expected;
end


// expected testpin[ 3 ]
initial
begin
	testpin_expected[3] = 1'bX;
end 
// expected testpin[ 2 ]
initial
begin
	testpin_expected[2] = 1'bX;
end 
// expected testpin[ 1 ]
initial
begin
	testpin_expected[1] = 1'bX;
end 
// expected testpin[ 0 ]
initial
begin
	testpin_expected[0] = 1'bX;
end 
// expected ppop[ 3 ]
initial
begin
	ppop_expected[3] = 1'bX;
end 
// expected ppop[ 2 ]
initial
begin
	ppop_expected[2] = 1'bX;
end 
// expected ppop[ 1 ]
initial
begin
	ppop_expected[1] = 1'bX;
end 
// expected ppop[ 0 ]
initial
begin
	ppop_expected[0] = 1'bX;
end 
// generate trigger
always @(b_v_expected or b_v or COM_expected or COM or ppop_expected or ppop or S_expected or S or testpin_expected or testpin)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected b_v = %b | expected COM = %b | expected ppop = %b | expected S = %b | expected testpin = %b | ",b_v_expected_prev,COM_expected_prev,ppop_expected_prev,S_expected_prev,testpin_expected_prev);
	$display("| real b_v = %b | real COM = %b | real ppop = %b | real S = %b | real testpin = %b | ",b_v_prev,COM_prev,ppop_prev,S_prev,testpin_prev);
`endif
	if (
		( ppop_expected_prev[0] !== 1'bx ) && ( ppop_prev[0] !== ppop_expected_prev[0] )
		&& ((ppop_expected_prev[0] !== last_ppop_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ppop[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ppop_expected_prev);
		$display ("     Real value = %b", ppop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ppop_exp[0] = ppop_expected_prev[0];
	end
	if (
		( ppop_expected_prev[1] !== 1'bx ) && ( ppop_prev[1] !== ppop_expected_prev[1] )
		&& ((ppop_expected_prev[1] !== last_ppop_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ppop[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ppop_expected_prev);
		$display ("     Real value = %b", ppop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ppop_exp[1] = ppop_expected_prev[1];
	end
	if (
		( ppop_expected_prev[2] !== 1'bx ) && ( ppop_prev[2] !== ppop_expected_prev[2] )
		&& ((ppop_expected_prev[2] !== last_ppop_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ppop[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ppop_expected_prev);
		$display ("     Real value = %b", ppop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ppop_exp[2] = ppop_expected_prev[2];
	end
	if (
		( ppop_expected_prev[3] !== 1'bx ) && ( ppop_prev[3] !== ppop_expected_prev[3] )
		&& ((ppop_expected_prev[3] !== last_ppop_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ppop[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ppop_expected_prev);
		$display ("     Real value = %b", ppop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ppop_exp[3] = ppop_expected_prev[3];
	end
	if (
		( testpin_expected_prev[0] !== 1'bx ) && ( testpin_prev[0] !== testpin_expected_prev[0] )
		&& ((testpin_expected_prev[0] !== last_testpin_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testpin_expected_prev);
		$display ("     Real value = %b", testpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testpin_exp[0] = testpin_expected_prev[0];
	end
	if (
		( testpin_expected_prev[1] !== 1'bx ) && ( testpin_prev[1] !== testpin_expected_prev[1] )
		&& ((testpin_expected_prev[1] !== last_testpin_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testpin_expected_prev);
		$display ("     Real value = %b", testpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testpin_exp[1] = testpin_expected_prev[1];
	end
	if (
		( testpin_expected_prev[2] !== 1'bx ) && ( testpin_prev[2] !== testpin_expected_prev[2] )
		&& ((testpin_expected_prev[2] !== last_testpin_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testpin_expected_prev);
		$display ("     Real value = %b", testpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testpin_exp[2] = testpin_expected_prev[2];
	end
	if (
		( testpin_expected_prev[3] !== 1'bx ) && ( testpin_prev[3] !== testpin_expected_prev[3] )
		&& ((testpin_expected_prev[3] !== last_testpin_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testpin_expected_prev);
		$display ("     Real value = %b", testpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testpin_exp[3] = testpin_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projectClock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg edit_pin;
reg keypad_0;
reg keypad_1;
reg keypad_2;
// wires                                               
wire [6:0] b_v;
wire COM;
wire [3:0] ppop;
wire [2:0] S;
wire [3:0] testpin;

wire sampler;                             

// assign statements (if any)                          
projectClock i1 (
// port map - connection between master ports and signals/registers   
	.b_v(b_v),
	.clk(clk),
	.COM(COM),
	.edit_pin(edit_pin),
	.keypad_0(keypad_0),
	.keypad_1(keypad_1),
	.keypad_2(keypad_2),
	.ppop(ppop),
	.S(S),
	.testpin(testpin)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// keypad_0
initial
begin
	keypad_0 = 1'b1;
end 

// keypad_1
initial
begin
	keypad_1 = 1'b1;
end 

// keypad_2
initial
begin
	keypad_2 = 1'b1;
	keypad_2 = #50000 1'b0;
	keypad_2 = #100000 1'b1;
end 

projectClock_vlg_sample_tst tb_sample (
	.clk(clk),
	.edit_pin(edit_pin),
	.keypad_0(keypad_0),
	.keypad_1(keypad_1),
	.keypad_2(keypad_2),
	.sampler_tx(sampler)
);

projectClock_vlg_check_tst tb_out(
	.b_v(b_v),
	.COM(COM),
	.ppop(ppop),
	.S(S),
	.testpin(testpin),
	.sampler_rx(sampler)
);
endmodule

